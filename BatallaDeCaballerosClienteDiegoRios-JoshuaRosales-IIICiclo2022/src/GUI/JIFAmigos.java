/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI;

import Domain.ClienteSingleton;
import Utility.GestionXML;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Diego
 */
public class JIFAmigos extends javax.swing.JInternalFrame implements Runnable {

    /**
     * Creates new form JIFAmigos
     */
    private boolean hilo;
    private DefaultTableModel dtmAmigos;
    private ArrayList<String> amigos;

    public JIFAmigos() {
        initComponents();
        this.amigos = new ArrayList<>();
        this.hilo = true;
        this.dtmAmigos = (DefaultTableModel) this.jtaAmigos.getModel();
        ClienteSingleton cs = ClienteSingleton.getInstance();
        Thread t = new Thread(this);
        t.start();
        GestionXML gestionXML = new GestionXML();
        String mensaje = gestionXML.xmlToString(gestionXML.crearMensajeProtocolo("listaAmigos"));
        System.out.println(mensaje);
        cs.enviarDatos(mensaje);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jtaAmigos = new javax.swing.JTable();

        setClosable(true);
        setTitle("Amigos");

        jtaAmigos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre de usuario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtaAmigos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtaAmigos;
    // End of variables declaration//GEN-END:variables

    
    //Este hilo recibe la informacion actualizada de los amigos del jugador.
    @Override
    public void run() {

        ClienteSingleton cs = ClienteSingleton.getInstance();
        while (this.hilo) {
            try {
//                System.out.println("aqui");
                if (cs.isAmigosLista()) {
                    
                    this.amigos.clear();
                    this.amigos=cs.getAmigos();
                    for (int i = 0; i < this.amigos.size(); i++) {
                        System.out.println(this.amigos.get(i));
                        
                    }
                    cargarDatos();
                    
                    this.hilo=false;
                    cs.setAmigosLista(false);
                }
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(JIFAmigos.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    //carga en una tabla los nombres de los amigos del jugador logueado
    private void cargarDatos() {

        for (int i = 0; i < this.amigos.size(); i++) {
            this.dtmAmigos.addRow(new Object[]{this.amigos.get(i) });
            
        }
    }
}
