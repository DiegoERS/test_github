/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI;

import Domain.ClienteSingleton;
import Domain.Juego;
import Domain.Jugador;
import Utility.GestionXML;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Diego
 */
public class JIFRanking extends javax.swing.JInternalFrame implements Runnable{

    /**
     * Creates new form JIFRanking
     */
    private boolean hilo;
    private DefaultTableModel dtmJugadores;
    private ClienteSingleton clienteSingleton;
    private ArrayList<Jugador> jugadores;
    public JIFRanking() {
        this.jugadores=new ArrayList<>();
        this.hilo=true;
        Thread thread=new Thread(this);
        thread.start();
        initComponents();
        this.clienteSingleton=ClienteSingleton.getInstance();
        this.jugadores=new ArrayList<>();
        this.dtmJugadores= (DefaultTableModel) this.jtRanking.getModel();
        GestionXML gestionXML=new GestionXML();
        String mensaje=gestionXML.xmlToString(gestionXML.crearMensajeProtocolo("ranking"));
        this.clienteSingleton.enviarDatos(mensaje);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtRanking = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Sala de trono");

        jtRanking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre de usuario", "Lingotes de oro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtRanking);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ranking:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtRanking;
    // End of variables declaration//GEN-END:variables

    
    
    //Este metodo se encarga de cargar la informacion del ranking en una tabla y ordenarla por lingotes.
    private void cargarDatos() {
  
            
            
             Collections.sort(jugadores, new Comparator<Jugador>() {
           @Override
           public int compare(Jugador o1, Jugador o2) {
                int dato1=o1.getLingotesOro();
                int dato2=o2.getLingotesOro();
                return new Integer(dato2).compareTo(new Integer(dato1));
           }
             });
             
             
           
             for (int i = 0; i < this.jugadores.size(); i++) {
                 this.dtmJugadores.addRow(new Object[]{this.jugadores.get(i).getNombreUsuario(),
                     this.jugadores.get(i).getLingotesOro()
                     });
                 
             }
             
    }
   //Este hilo espera la actualizacion de la tabla y luego envia la informacion a una lista
    @Override
    public void run() {
        ClienteSingleton cliente=ClienteSingleton.getInstance();
        while (this.hilo) { 
            
            try {
           
                
                if (cliente.isPrueba()) {
                    this.jugadores.clear();
                    this.jugadores=cliente.getJugadores();
                    
                     
                    cargarDatos();
                    this.hilo=false;
                    this.clienteSingleton.setPrueba(false);
                }
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Logger.getLogger(JIFRanking.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
